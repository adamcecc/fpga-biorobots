// Code generated by Icestudio 0.4.0-dev
// Sat, 25 May 2019 11:14:33 GMT

`default_nettype none

module main #(
 parameter v03dbe9 = 1,
 parameter v987709 = 7,
 parameter vdd3c26 = 40,
 parameter v8b7335 = 1,
 parameter v9446cc = 64,
 parameter vfdf927 = "l21.list",
 parameter v9ed468 = "l31.list",
 parameter v75018d = "l11.list",
 parameter v37582e = 64,
 parameter vbf4074 = 64,
 parameter v746302 = 64,
 parameter v80b5ee = 0,
 parameter v8d3e1f = 0,
 parameter v0e379f = 0,
 parameter v5bdd42 = 255,
 parameter v1becb4 = 255,
 parameter v4b426e = 255,
 parameter vbe69bd = 12,
 parameter v80e7d0 = 12,
 parameter v756b27 = 0,
 parameter v9984d8 = 8'hbf,
 parameter v46f9b5 = 127,
 parameter vf09d55 = 8'h40,
 parameter vf70ada = "l12.list",
 parameter vb2543b = "l22.list",
 parameter vc9021b = "l32.list",
 parameter vf44b17 = 64,
 parameter ve9f54e = 64,
 parameter v96af11 = 64,
 parameter v242735 = 0,
 parameter v44099e = 0,
 parameter v7843a3 = 0,
 parameter vab4dcd = 255,
 parameter v593c10 = 255,
 parameter v7b4a00 = 255,
 parameter v220319 = 0,
 parameter v8f67fc = 0,
 parameter vc66850 = 0,
 parameter va7a357 = 127,
 parameter v5f1e02 = 127,
 parameter v7c8177 = 127,
 parameter v2227fe = "r11.list",
 parameter v95524a = "r21.list",
 parameter v0ec0bf = "r31.list",
 parameter vd728da = 64,
 parameter v8b831b = 64,
 parameter vbe481b = 64,
 parameter v3619fc = 0,
 parameter vda45fa = 0,
 parameter vffaf67 = 0,
 parameter vc0e9d0 = 255,
 parameter v655a41 = 255,
 parameter va58627 = 255,
 parameter va01008 = 0,
 parameter v8f99e4 = 0,
 parameter v5fe05f = 0,
 parameter v53ed10 = 127,
 parameter vf7704e = 8'h40,
 parameter vce7ce4 = 8'hbf,
 parameter ve7cc55 = "r12.list",
 parameter v3069b3 = "r22.list",
 parameter vb2d6fc = "r32.list",
 parameter v5a8352 = 64,
 parameter vfc1fa8 = 64,
 parameter v9f2bf1 = 64,
 parameter v5b5fc1 = 0,
 parameter ve9890e = 0,
 parameter v27d1cb = 0,
 parameter v72f27a = 255,
 parameter v67c191 = 255,
 parameter ve87b8b = 255,
 parameter vdaba48 = 0,
 parameter v1a259b = 0,
 parameter v212f4a = 0,
 parameter v2d0024 = 127,
 parameter v706c07 = 127,
 parameter v53186b = 127
) (
 input v56d01b,
 input vclk,
 output v6b7651,
 output v989385,
 output v028bdc,
 output ve8ef9f,
 output v1f2f27,
 output v9a10c7,
 output v22cfdd,
 output vc412c0,
 output [7:0] v3b9757,
 output vddcfe4,
 output v319115,
 output vb008e5,
 output v94295e
);
 localparam p0 = v2227fe;
 localparam p2 = v8b7335;
 localparam p4 = vdd3c26;
 localparam p6 = v9446cc;
 localparam p8 = ve7cc55;
 localparam p9 = vd728da;
 localparam p10 = v5a8352;
 localparam p11 = v95524a;
 localparam p12 = v8b831b;
 localparam p13 = v3069b3;
 localparam p14 = vfc1fa8;
 localparam p15 = v0ec0bf;
 localparam p16 = vbe481b;
 localparam p17 = vb2d6fc;
 localparam p18 = v9f2bf1;
 localparam p19 = v75018d;
 localparam p20 = v746302;
 localparam p21 = vf70ada;
 localparam p22 = vf44b17;
 localparam p25 = vfdf927;
 localparam p26 = v37582e;
 localparam p27 = vb2543b;
 localparam p28 = ve9f54e;
 localparam p29 = v9ed468;
 localparam p30 = vbf4074;
 localparam p31 = vc9021b;
 localparam p32 = v96af11;
 localparam p34 = v80b5ee;
 localparam p35 = v5bdd42;
 localparam p36 = vbe69bd;
 localparam p37 = v9984d8;
 localparam p39 = v8d3e1f;
 localparam p40 = v1becb4;
 localparam p41 = v80e7d0;
 localparam p42 = v46f9b5;
 localparam p43 = v0e379f;
 localparam p44 = v4b426e;
 localparam p45 = v756b27;
 localparam p46 = vf09d55;
 localparam p49 = v7843a3;
 localparam p50 = v7b4a00;
 localparam p51 = vc66850;
 localparam p52 = v7c8177;
 localparam p55 = v242735;
 localparam p56 = vab4dcd;
 localparam p57 = v220319;
 localparam p58 = va7a357;
 localparam p61 = v44099e;
 localparam p62 = v593c10;
 localparam p63 = v8f67fc;
 localparam p64 = v5f1e02;
 localparam p67 = vffaf67;
 localparam p68 = va58627;
 localparam p69 = v5fe05f;
 localparam p70 = vce7ce4;
 localparam p73 = v3619fc;
 localparam p74 = vc0e9d0;
 localparam p75 = va01008;
 localparam p76 = v53ed10;
 localparam p79 = vda45fa;
 localparam p80 = v655a41;
 localparam p81 = v8f99e4;
 localparam p82 = vf7704e;
 localparam p85 = v27d1cb;
 localparam p86 = ve87b8b;
 localparam p87 = v212f4a;
 localparam p88 = v53186b;
 localparam p91 = v5b5fc1;
 localparam p92 = v72f27a;
 localparam p93 = vdaba48;
 localparam p94 = v2d0024;
 localparam p97 = ve9890e;
 localparam p98 = v67c191;
 localparam p99 = v1a259b;
 localparam p100 = v706c07;
 localparam p104 = v987709;
 localparam p106 = v03dbe9;
 wire w1;
 wire w3;
 wire w5;
 wire w7;
 wire w23;
 wire [0:7] w24;
 wire [0:7] w33;
 wire w38;
 wire [0:7] w47;
 wire w48;
 wire [0:7] w53;
 wire w54;
 wire [0:7] w59;
 wire w60;
 wire [0:7] w65;
 wire w66;
 wire [0:7] w71;
 wire w72;
 wire [0:7] w77;
 wire w78;
 wire [0:7] w83;
 wire w84;
 wire [0:7] w89;
 wire w90;
 wire [0:7] w95;
 wire w96;
 wire [0:7] w101;
 wire w102;
 wire w103;
 wire w105;
 wire w107;
 wire w108;
 wire w109;
 wire w110;
 wire w111;
 wire w112;
 wire w113;
 wire w114;
 wire w115;
 wire w116;
 wire w117;
 wire w118;
 wire w119;
 wire w120;
 wire w121;
 wire w122;
 wire w123;
 wire w124;
 wire w125;
 wire w126;
 wire w127;
 wire w128;
 wire w129;
 wire w130;
 wire w131;
 wire w132;
 wire w133;
 wire w134;
 wire w135;
 wire w136;
 wire w137;
 wire w138;
 wire [0:7] w139;
 wire [0:7] w140;
 wire [0:7] w141;
 wire [0:7] w142;
 wire [0:7] w143;
 wire [0:7] w144;
 wire [0:7] w145;
 wire [0:7] w146;
 wire [0:7] w147;
 wire [0:7] w148;
 wire [0:7] w149;
 wire [0:7] w150;
 wire [0:7] w151;
 wire w152;
 wire w153;
 wire w154;
 wire w155;
 wire w156;
 wire w157;
 wire w158;
 wire w159;
 wire w160;
 wire w161;
 wire w162;
 wire w163;
 wire w164;
 assign w1 = v56d01b;
 assign vc412c0 = w23;
 assign v94295e = w38;
 assign ve8ef9f = w48;
 assign v028bdc = w54;
 assign v22cfdd = w60;
 assign vb008e5 = w66;
 assign v989385 = w72;
 assign v9a10c7 = w78;
 assign v319115 = w84;
 assign v6b7651 = w90;
 assign v1f2f27 = w96;
 assign vddcfe4 = w102;
 assign w109 = vclk;
 assign w110 = vclk;
 assign w111 = vclk;
 assign w112 = vclk;
 assign w113 = vclk;
 assign w114 = vclk;
 assign w115 = vclk;
 assign w116 = vclk;
 assign w117 = vclk;
 assign w118 = vclk;
 assign w119 = vclk;
 assign w120 = vclk;
 assign w121 = vclk;
 assign w122 = vclk;
 assign w123 = vclk;
 assign w124 = vclk;
 assign w125 = vclk;
 assign w126 = vclk;
 assign w127 = vclk;
 assign w128 = vclk;
 assign w129 = vclk;
 assign w130 = vclk;
 assign w131 = vclk;
 assign w132 = vclk;
 assign w133 = vclk;
 assign w134 = vclk;
 assign w135 = vclk;
 assign w136 = vclk;
 assign w137 = vclk;
 assign w138 = vclk;
 assign v3b9757 = w151;
 assign w110 = w109;
 assign w111 = w109;
 assign w111 = w110;
 assign w112 = w109;
 assign w112 = w110;
 assign w112 = w111;
 assign w113 = w109;
 assign w113 = w110;
 assign w113 = w111;
 assign w113 = w112;
 assign w114 = w109;
 assign w114 = w110;
 assign w114 = w111;
 assign w114 = w112;
 assign w114 = w113;
 assign w115 = w109;
 assign w115 = w110;
 assign w115 = w111;
 assign w115 = w112;
 assign w115 = w113;
 assign w115 = w114;
 assign w116 = w109;
 assign w116 = w110;
 assign w116 = w111;
 assign w116 = w112;
 assign w116 = w113;
 assign w116 = w114;
 assign w116 = w115;
 assign w117 = w109;
 assign w117 = w110;
 assign w117 = w111;
 assign w117 = w112;
 assign w117 = w113;
 assign w117 = w114;
 assign w117 = w115;
 assign w117 = w116;
 assign w118 = w109;
 assign w118 = w110;
 assign w118 = w111;
 assign w118 = w112;
 assign w118 = w113;
 assign w118 = w114;
 assign w118 = w115;
 assign w118 = w116;
 assign w118 = w117;
 assign w119 = w109;
 assign w119 = w110;
 assign w119 = w111;
 assign w119 = w112;
 assign w119 = w113;
 assign w119 = w114;
 assign w119 = w115;
 assign w119 = w116;
 assign w119 = w117;
 assign w119 = w118;
 assign w120 = w109;
 assign w120 = w110;
 assign w120 = w111;
 assign w120 = w112;
 assign w120 = w113;
 assign w120 = w114;
 assign w120 = w115;
 assign w120 = w116;
 assign w120 = w117;
 assign w120 = w118;
 assign w120 = w119;
 assign w121 = w109;
 assign w121 = w110;
 assign w121 = w111;
 assign w121 = w112;
 assign w121 = w113;
 assign w121 = w114;
 assign w121 = w115;
 assign w121 = w116;
 assign w121 = w117;
 assign w121 = w118;
 assign w121 = w119;
 assign w121 = w120;
 assign w122 = w109;
 assign w122 = w110;
 assign w122 = w111;
 assign w122 = w112;
 assign w122 = w113;
 assign w122 = w114;
 assign w122 = w115;
 assign w122 = w116;
 assign w122 = w117;
 assign w122 = w118;
 assign w122 = w119;
 assign w122 = w120;
 assign w122 = w121;
 assign w123 = w109;
 assign w123 = w110;
 assign w123 = w111;
 assign w123 = w112;
 assign w123 = w113;
 assign w123 = w114;
 assign w123 = w115;
 assign w123 = w116;
 assign w123 = w117;
 assign w123 = w118;
 assign w123 = w119;
 assign w123 = w120;
 assign w123 = w121;
 assign w123 = w122;
 assign w124 = w109;
 assign w124 = w110;
 assign w124 = w111;
 assign w124 = w112;
 assign w124 = w113;
 assign w124 = w114;
 assign w124 = w115;
 assign w124 = w116;
 assign w124 = w117;
 assign w124 = w118;
 assign w124 = w119;
 assign w124 = w120;
 assign w124 = w121;
 assign w124 = w122;
 assign w124 = w123;
 assign w125 = w109;
 assign w125 = w110;
 assign w125 = w111;
 assign w125 = w112;
 assign w125 = w113;
 assign w125 = w114;
 assign w125 = w115;
 assign w125 = w116;
 assign w125 = w117;
 assign w125 = w118;
 assign w125 = w119;
 assign w125 = w120;
 assign w125 = w121;
 assign w125 = w122;
 assign w125 = w123;
 assign w125 = w124;
 assign w126 = w109;
 assign w126 = w110;
 assign w126 = w111;
 assign w126 = w112;
 assign w126 = w113;
 assign w126 = w114;
 assign w126 = w115;
 assign w126 = w116;
 assign w126 = w117;
 assign w126 = w118;
 assign w126 = w119;
 assign w126 = w120;
 assign w126 = w121;
 assign w126 = w122;
 assign w126 = w123;
 assign w126 = w124;
 assign w126 = w125;
 assign w127 = w109;
 assign w127 = w110;
 assign w127 = w111;
 assign w127 = w112;
 assign w127 = w113;
 assign w127 = w114;
 assign w127 = w115;
 assign w127 = w116;
 assign w127 = w117;
 assign w127 = w118;
 assign w127 = w119;
 assign w127 = w120;
 assign w127 = w121;
 assign w127 = w122;
 assign w127 = w123;
 assign w127 = w124;
 assign w127 = w125;
 assign w127 = w126;
 assign w128 = w109;
 assign w128 = w110;
 assign w128 = w111;
 assign w128 = w112;
 assign w128 = w113;
 assign w128 = w114;
 assign w128 = w115;
 assign w128 = w116;
 assign w128 = w117;
 assign w128 = w118;
 assign w128 = w119;
 assign w128 = w120;
 assign w128 = w121;
 assign w128 = w122;
 assign w128 = w123;
 assign w128 = w124;
 assign w128 = w125;
 assign w128 = w126;
 assign w128 = w127;
 assign w129 = w109;
 assign w129 = w110;
 assign w129 = w111;
 assign w129 = w112;
 assign w129 = w113;
 assign w129 = w114;
 assign w129 = w115;
 assign w129 = w116;
 assign w129 = w117;
 assign w129 = w118;
 assign w129 = w119;
 assign w129 = w120;
 assign w129 = w121;
 assign w129 = w122;
 assign w129 = w123;
 assign w129 = w124;
 assign w129 = w125;
 assign w129 = w126;
 assign w129 = w127;
 assign w129 = w128;
 assign w130 = w109;
 assign w130 = w110;
 assign w130 = w111;
 assign w130 = w112;
 assign w130 = w113;
 assign w130 = w114;
 assign w130 = w115;
 assign w130 = w116;
 assign w130 = w117;
 assign w130 = w118;
 assign w130 = w119;
 assign w130 = w120;
 assign w130 = w121;
 assign w130 = w122;
 assign w130 = w123;
 assign w130 = w124;
 assign w130 = w125;
 assign w130 = w126;
 assign w130 = w127;
 assign w130 = w128;
 assign w130 = w129;
 assign w131 = w109;
 assign w131 = w110;
 assign w131 = w111;
 assign w131 = w112;
 assign w131 = w113;
 assign w131 = w114;
 assign w131 = w115;
 assign w131 = w116;
 assign w131 = w117;
 assign w131 = w118;
 assign w131 = w119;
 assign w131 = w120;
 assign w131 = w121;
 assign w131 = w122;
 assign w131 = w123;
 assign w131 = w124;
 assign w131 = w125;
 assign w131 = w126;
 assign w131 = w127;
 assign w131 = w128;
 assign w131 = w129;
 assign w131 = w130;
 assign w132 = w109;
 assign w132 = w110;
 assign w132 = w111;
 assign w132 = w112;
 assign w132 = w113;
 assign w132 = w114;
 assign w132 = w115;
 assign w132 = w116;
 assign w132 = w117;
 assign w132 = w118;
 assign w132 = w119;
 assign w132 = w120;
 assign w132 = w121;
 assign w132 = w122;
 assign w132 = w123;
 assign w132 = w124;
 assign w132 = w125;
 assign w132 = w126;
 assign w132 = w127;
 assign w132 = w128;
 assign w132 = w129;
 assign w132 = w130;
 assign w132 = w131;
 assign w133 = w109;
 assign w133 = w110;
 assign w133 = w111;
 assign w133 = w112;
 assign w133 = w113;
 assign w133 = w114;
 assign w133 = w115;
 assign w133 = w116;
 assign w133 = w117;
 assign w133 = w118;
 assign w133 = w119;
 assign w133 = w120;
 assign w133 = w121;
 assign w133 = w122;
 assign w133 = w123;
 assign w133 = w124;
 assign w133 = w125;
 assign w133 = w126;
 assign w133 = w127;
 assign w133 = w128;
 assign w133 = w129;
 assign w133 = w130;
 assign w133 = w131;
 assign w133 = w132;
 assign w134 = w109;
 assign w134 = w110;
 assign w134 = w111;
 assign w134 = w112;
 assign w134 = w113;
 assign w134 = w114;
 assign w134 = w115;
 assign w134 = w116;
 assign w134 = w117;
 assign w134 = w118;
 assign w134 = w119;
 assign w134 = w120;
 assign w134 = w121;
 assign w134 = w122;
 assign w134 = w123;
 assign w134 = w124;
 assign w134 = w125;
 assign w134 = w126;
 assign w134 = w127;
 assign w134 = w128;
 assign w134 = w129;
 assign w134 = w130;
 assign w134 = w131;
 assign w134 = w132;
 assign w134 = w133;
 assign w135 = w109;
 assign w135 = w110;
 assign w135 = w111;
 assign w135 = w112;
 assign w135 = w113;
 assign w135 = w114;
 assign w135 = w115;
 assign w135 = w116;
 assign w135 = w117;
 assign w135 = w118;
 assign w135 = w119;
 assign w135 = w120;
 assign w135 = w121;
 assign w135 = w122;
 assign w135 = w123;
 assign w135 = w124;
 assign w135 = w125;
 assign w135 = w126;
 assign w135 = w127;
 assign w135 = w128;
 assign w135 = w129;
 assign w135 = w130;
 assign w135 = w131;
 assign w135 = w132;
 assign w135 = w133;
 assign w135 = w134;
 assign w136 = w109;
 assign w136 = w110;
 assign w136 = w111;
 assign w136 = w112;
 assign w136 = w113;
 assign w136 = w114;
 assign w136 = w115;
 assign w136 = w116;
 assign w136 = w117;
 assign w136 = w118;
 assign w136 = w119;
 assign w136 = w120;
 assign w136 = w121;
 assign w136 = w122;
 assign w136 = w123;
 assign w136 = w124;
 assign w136 = w125;
 assign w136 = w126;
 assign w136 = w127;
 assign w136 = w128;
 assign w136 = w129;
 assign w136 = w130;
 assign w136 = w131;
 assign w136 = w132;
 assign w136 = w133;
 assign w136 = w134;
 assign w136 = w135;
 assign w137 = w109;
 assign w137 = w110;
 assign w137 = w111;
 assign w137 = w112;
 assign w137 = w113;
 assign w137 = w114;
 assign w137 = w115;
 assign w137 = w116;
 assign w137 = w117;
 assign w137 = w118;
 assign w137 = w119;
 assign w137 = w120;
 assign w137 = w121;
 assign w137 = w122;
 assign w137 = w123;
 assign w137 = w124;
 assign w137 = w125;
 assign w137 = w126;
 assign w137 = w127;
 assign w137 = w128;
 assign w137 = w129;
 assign w137 = w130;
 assign w137 = w131;
 assign w137 = w132;
 assign w137 = w133;
 assign w137 = w134;
 assign w137 = w135;
 assign w137 = w136;
 assign w138 = w109;
 assign w138 = w110;
 assign w138 = w111;
 assign w138 = w112;
 assign w138 = w113;
 assign w138 = w114;
 assign w138 = w115;
 assign w138 = w116;
 assign w138 = w117;
 assign w138 = w118;
 assign w138 = w119;
 assign w138 = w120;
 assign w138 = w121;
 assign w138 = w122;
 assign w138 = w123;
 assign w138 = w124;
 assign w138 = w125;
 assign w138 = w126;
 assign w138 = w127;
 assign w138 = w128;
 assign w138 = w129;
 assign w138 = w130;
 assign w138 = w131;
 assign w138 = w132;
 assign w138 = w133;
 assign w138 = w134;
 assign w138 = w135;
 assign w138 = w136;
 assign w138 = w137;
 assign w140 = w139;
 assign w141 = w139;
 assign w141 = w140;
 assign w142 = w139;
 assign w142 = w140;
 assign w142 = w141;
 assign w143 = w139;
 assign w143 = w140;
 assign w143 = w141;
 assign w143 = w142;
 assign w144 = w139;
 assign w144 = w140;
 assign w144 = w141;
 assign w144 = w142;
 assign w144 = w143;
 assign w145 = w139;
 assign w145 = w140;
 assign w145 = w141;
 assign w145 = w142;
 assign w145 = w143;
 assign w145 = w144;
 assign w146 = w139;
 assign w146 = w140;
 assign w146 = w141;
 assign w146 = w142;
 assign w146 = w143;
 assign w146 = w144;
 assign w146 = w145;
 assign w147 = w139;
 assign w147 = w140;
 assign w147 = w141;
 assign w147 = w142;
 assign w147 = w143;
 assign w147 = w144;
 assign w147 = w145;
 assign w147 = w146;
 assign w148 = w139;
 assign w148 = w140;
 assign w148 = w141;
 assign w148 = w142;
 assign w148 = w143;
 assign w148 = w144;
 assign w148 = w145;
 assign w148 = w146;
 assign w148 = w147;
 assign w149 = w139;
 assign w149 = w140;
 assign w149 = w141;
 assign w149 = w142;
 assign w149 = w143;
 assign w149 = w144;
 assign w149 = w145;
 assign w149 = w146;
 assign w149 = w147;
 assign w149 = w148;
 assign w150 = w139;
 assign w150 = w140;
 assign w150 = w141;
 assign w150 = w142;
 assign w150 = w143;
 assign w150 = w144;
 assign w150 = w145;
 assign w150 = w146;
 assign w150 = w147;
 assign w150 = w148;
 assign w150 = w149;
 assign w151 = w139;
 assign w151 = w140;
 assign w151 = w141;
 assign w151 = w142;
 assign w151 = w143;
 assign w151 = w144;
 assign w151 = w145;
 assign w151 = w146;
 assign w151 = w147;
 assign w151 = w148;
 assign w151 = w149;
 assign w151 = w150;
 assign w153 = w152;
 assign w154 = w152;
 assign w154 = w153;
 assign w155 = w152;
 assign w155 = w153;
 assign w155 = w154;
 assign w156 = w152;
 assign w156 = w153;
 assign w156 = w154;
 assign w156 = w155;
 assign w157 = w152;
 assign w157 = w153;
 assign w157 = w154;
 assign w157 = w155;
 assign w157 = w156;
 assign w158 = w152;
 assign w158 = w153;
 assign w158 = w154;
 assign w158 = w155;
 assign w158 = w156;
 assign w158 = w157;
 assign w159 = w152;
 assign w159 = w153;
 assign w159 = w154;
 assign w159 = w155;
 assign w159 = w156;
 assign w159 = w157;
 assign w159 = w158;
 assign w160 = w152;
 assign w160 = w153;
 assign w160 = w154;
 assign w160 = w155;
 assign w160 = w156;
 assign w160 = w157;
 assign w160 = w158;
 assign w160 = w159;
 assign w161 = w152;
 assign w161 = w153;
 assign w161 = w154;
 assign w161 = w155;
 assign w161 = w156;
 assign w161 = w157;
 assign w161 = w158;
 assign w161 = w159;
 assign w161 = w160;
 assign w162 = w152;
 assign w162 = w153;
 assign w162 = w154;
 assign w162 = w155;
 assign w162 = w156;
 assign w162 = w157;
 assign w162 = w158;
 assign w162 = w159;
 assign w162 = w160;
 assign w162 = w161;
 assign w163 = w152;
 assign w163 = w153;
 assign w163 = w154;
 assign w163 = w155;
 assign w163 = w156;
 assign w163 = w157;
 assign w163 = w158;
 assign w163 = w159;
 assign w163 = w160;
 assign w163 = w161;
 assign w163 = w162;
 assign w164 = w152;
 assign w164 = w153;
 assign w164 = w154;
 assign w164 = w155;
 assign w164 = w156;
 assign w164 = w157;
 assign w164 = w158;
 assign w164 = w159;
 assign w164 = w160;
 assign w164 = w161;
 assign w164 = w162;
 assign w164 = w163;
 v91abf1 v583dfe (
  .v695853(w3),
  .vcdeb69(w108),
  .v09a613(w152)
 );
 v898c88 #(
  .va13d52(p2)
 ) v62e4cd (
  .v39d3f6(w1),
  .ve54854(w3),
  .v24ca1c(w109)
 );
 vd014cb #(
  .v5e4a03(p6)
 ) v6e9bd7 (
  .v7c533e(w5),
  .ve61673(w7),
  .vdd729a(w110),
  .vb86fe4(w139)
 );
 vebfed3 #(
  .vfb06ae(p4)
 ) vb396fc (
  .v2a8434(w5),
  .vac0eb2(w111)
 );
 v35f267 vf79edf (
  .vcbab45(w7),
  .v0e28cb(w152)
 );
 v02e28e #(
  .v2acdf5(p0),
  .v816a8f(p9)
 ) vc9b980 (
  .v2a7461(w83),
  .v4479bb(w112),
  .v627d0b(w148)
 );
 v02e28e #(
  .v2acdf5(p8),
  .v816a8f(p10)
 ) vd53856 (
  .v2a7461(w101),
  .v4479bb(w113),
  .v627d0b(w147)
 );
 v02e28e #(
  .v2acdf5(p11),
  .v816a8f(p12)
 ) v157c82 (
  .v2a7461(w77),
  .v4479bb(w114),
  .v627d0b(w144)
 );
 v02e28e #(
  .v2acdf5(p13),
  .v816a8f(p14)
 ) v60f87a (
  .v2a7461(w95),
  .v4479bb(w115),
  .v627d0b(w143)
 );
 v02e28e #(
  .v2acdf5(p15),
  .v816a8f(p16)
 ) v791344 (
  .v2a7461(w71),
  .v4479bb(w116),
  .v627d0b(w140)
 );
 v02e28e #(
  .v2acdf5(p17),
  .v816a8f(p18)
 ) vd7baff (
  .v2a7461(w89),
  .v4479bb(w117),
  .v627d0b(w139)
 );
 v02e28e #(
  .v2acdf5(p19),
  .v816a8f(p20)
 ) v4aa1e5 (
  .v2a7461(w33),
  .v4479bb(w118),
  .v627d0b(w150)
 );
 v02e28e #(
  .v2acdf5(p21),
  .v816a8f(p22)
 ) v5503e7 (
  .v2a7461(w65),
  .v4479bb(w119),
  .v627d0b(w149)
 );
 v02e28e #(
  .v2acdf5(p25),
  .v816a8f(p26)
 ) vfc6824 (
  .v2a7461(w24),
  .v4479bb(w120),
  .v627d0b(w146)
 );
 v02e28e #(
  .v2acdf5(p27),
  .v816a8f(p28)
 ) v616e61 (
  .v2a7461(w59),
  .v4479bb(w121),
  .v627d0b(w145)
 );
 v02e28e #(
  .v2acdf5(p29),
  .v816a8f(p30)
 ) v99aeee (
  .v2a7461(w47),
  .v4479bb(w122),
  .v627d0b(w142)
 );
 v02e28e #(
  .v2acdf5(p31),
  .v816a8f(p32)
 ) vcd3b4d (
  .v2a7461(w53),
  .v4479bb(w123),
  .v627d0b(w141)
 );
 v21cfcc vd6d2ba (
 
 );
 v21cfcc v9b26a7 (
 
 );
 v21cfcc v6761c5 (
 
 );
 v21cfcc v776cb2 (
 
 );
 v21cfcc v365b2f (
 
 );
 vf1fcf8 #(
  .v79a04d(p34),
  .v65ff05(p35),
  .vee4e49(p36),
  .vc78345(p37)
 ) v873716 (
  .v371b73(w33),
  .v85e0b7(w38),
  .va34edf(w124),
  .v47c08a(w163)
 );
 v21cfcc va99290 (
 
 );
 vf1fcf8 #(
  .v79a04d(p39),
  .v65ff05(p40),
  .vee4e49(p41),
  .vc78345(p42)
 ) vd55e01 (
  .v85e0b7(w23),
  .v371b73(w24),
  .va34edf(w125),
  .v47c08a(w160)
 );
 vf1fcf8 #(
  .v79a04d(p43),
  .v65ff05(p44),
  .vee4e49(p45),
  .vc78345(p46)
 ) v45a620 (
  .v371b73(w47),
  .v85e0b7(w48),
  .va34edf(w126),
  .v47c08a(w156)
 );
 vf1fcf8 #(
  .v79a04d(p49),
  .v65ff05(p50),
  .vee4e49(p51),
  .vc78345(p52)
 ) v407981 (
  .v371b73(w53),
  .v85e0b7(w54),
  .va34edf(w127),
  .v47c08a(w155)
 );
 vf1fcf8 #(
  .v79a04d(p55),
  .v65ff05(p56),
  .vee4e49(p57),
  .vc78345(p58)
 ) v0e791f (
  .v371b73(w59),
  .v85e0b7(w60),
  .va34edf(w128),
  .v47c08a(w159)
 );
 vf1fcf8 #(
  .v79a04d(p61),
  .v65ff05(p62),
  .vee4e49(p63),
  .vc78345(p64)
 ) vcdb5ce (
  .v371b73(w65),
  .v85e0b7(w66),
  .va34edf(w129),
  .v47c08a(w162)
 );
 vf1fcf8 #(
  .v79a04d(p67),
  .v65ff05(p68),
  .vee4e49(p69),
  .vc78345(p70)
 ) v4f4634 (
  .v371b73(w71),
  .v85e0b7(w72),
  .va34edf(w130),
  .v47c08a(w154)
 );
 vf1fcf8 #(
  .v79a04d(p73),
  .v65ff05(p74),
  .vee4e49(p75),
  .vc78345(p76)
 ) v5729b5 (
  .v371b73(w77),
  .v85e0b7(w78),
  .va34edf(w131),
  .v47c08a(w158)
 );
 vf1fcf8 #(
  .v79a04d(p79),
  .v65ff05(p80),
  .vee4e49(p81),
  .vc78345(p82)
 ) v02c925 (
  .v371b73(w83),
  .v85e0b7(w84),
  .va34edf(w132),
  .v47c08a(w164)
 );
 vf1fcf8 #(
  .v79a04d(p85),
  .v65ff05(p86),
  .vee4e49(p87),
  .vc78345(p88)
 ) ve96214 (
  .v371b73(w89),
  .v85e0b7(w90),
  .va34edf(w133),
  .v47c08a(w153)
 );
 vf1fcf8 #(
  .v79a04d(p91),
  .v65ff05(p92),
  .vee4e49(p93),
  .vc78345(p94)
 ) v9274cf (
  .v371b73(w95),
  .v85e0b7(w96),
  .va34edf(w134),
  .v47c08a(w157)
 );
 vf1fcf8 #(
  .v79a04d(p97),
  .v65ff05(p98),
  .vee4e49(p99),
  .vc78345(p100)
 ) vfaace2 (
  .v371b73(w101),
  .v85e0b7(w102),
  .va34edf(w135),
  .v47c08a(w161)
 );
 v21cfcc v6dfdbc (
 
 );
 v21cfcc vc7ed4e (
 
 );
 v21cfcc v8227b2 (
 
 );
 v21cfcc vc31526 (
 
 );
 v21cfcc v978596 (
 
 );
 v21cfcc vcc7272 (
 
 );
 v42ebf7 v6e9418 (
  .vf54559(w103),
  .v9afc1f(w107),
  .ve8318d(w108),
  .va4102a(w136)
 );
 v3e6c24 v4026bd (
  .v608bd9(w103)
 );
 vd014cb #(
  .v5e4a03(p104)
 ) v0d1119 (
  .v7c533e(w105),
  .v712cd1(w107),
  .vdd729a(w137)
 );
 vebfed3 #(
  .vfb06ae(p106)
 ) v64a664 (
  .v2a8434(w105),
  .vac0eb2(w138)
 );
endmodule

module v91abf1 (
 input v695853,
 input vcdeb69,
 output v09a613
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v09a613 = w0;
 assign w2 = v695853;
 assign w3 = vcdeb69;
 v4b9553 v3d9ac5 (
  .vcbab45(w1),
  .v0e28cb(w2),
  .v3ca442(w3)
 );
 v0ec077 vfc842e (
  .v25ee73(w0),
  .v4b5bc2(w1)
 );
endmodule

module v4b9553 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v4b9553_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
 v44391c vf4114c (
 
 );
 v44391c vec8c80 (
 
 );
endmodule

module v4b9553_vf4938a (
 input a,
 input b,
 output c
);
 // NAND logic gate
 
 assign c = ~(a & b);
endmodule

module v44391c
;
 v74d69b v949c82 (
 
 );
 v74d69b ve0f5c7 (
 
 );
endmodule

module v74d69b
;
 vef9670 vdb7477 (
 
 );
 vef9670 v826842 (
 
 );
 vef9670 vdc9b55 (
 
 );
 vef9670 vea688b (
 
 );
endmodule

module vef9670
;
 v8450b0 vd09707 (
 
 );
 v8450b0 v38def6 (
 
 );
 v8450b0 v0c6e31 (
 
 );
 v8450b0 v3071e7 (
 
 );
 v8450b0 vca3873 (
 
 );
endmodule

module v8450b0
;

endmodule

module v0ec077 (
 input v4b5bc2,
 output v25ee73
);
 wire w0;
 wire w1;
 wire w2;
 assign v25ee73 = w0;
 assign w1 = v4b5bc2;
 assign w2 = v4b5bc2;
 assign w2 = w1;
 v4b9553 vdf6feb (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w2)
 );
endmodule

module v898c88 #(
 parameter va13d52 = 0
) (
 input v24ca1c,
 input v39d3f6,
 output ve54854
);
 localparam p3 = va13d52;
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v39d3f6;
 assign w1 = v24ca1c;
 assign ve54854 = w2;
 v898c88_vcefff1 #(
  .INI(p3)
 ) vcefff1 (
  .d(w0),
  .clk(w1),
  .tb(w2)
 );
endmodule

module v898c88_vcefff1 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output tb
);
 // Sincronizacion. Evitar 
 // problema de la metaestabilidad
 
 reg d2;
 reg r_in;
 
 always @(posedge clk)
  d2 <= d;
  
 always @(posedge clk)
   r_in <= d2;
 
 
 //-- Debouncer Circuit
 //-- It produces a stable output when the
 //-- input signal is bouncing
 
 reg btn_prev = 0;
 reg btn_out_r = 0;
 
 reg [16:0] counter = 0;
 
 
 always @(posedge clk) begin
 
   //-- If btn_prev and btn_in are differents
   if (btn_prev ^ r_in == 1'b1) begin
     
       //-- Reset the counter
       counter <= 0;
       
       //-- Capture the button status
       btn_prev <= r_in;
   end
     
   //-- If no timeout, increase the counter
   else if (counter[16] == 1'b0)
       counter <= counter + 1;
       
   else
     //-- Set the output to the stable value
     btn_out_r <= btn_prev;
 
 end
 
 
 //-- Generar tic en flanco de subida del boton
 reg old;
 wire tic;
 
 always @(posedge clk)
   old <= btn_out_r;
   
 assign tic = !old & btn_out_r;
 
 //-- Conectar a un biestable de tipo T
 reg q = INI;
 
 always @(posedge clk)
   if (tic)
     q <= ~q;
 
 //-- Sacar el estado del biestable por la salida
 assign tb = q;
 
 
 
 
endmodule

module vd014cb #(
 parameter v5e4a03 = 256
) (
 input vdd729a,
 input ve61673,
 input v7c533e,
 output [7:0] vb86fe4,
 output v712cd1
);
 localparam p1 = v5e4a03;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire [0:7] w5;
 assign w0 = ve61673;
 assign w2 = v7c533e;
 assign w3 = vdd729a;
 assign v712cd1 = w4;
 assign vb86fe4 = w5;
 vd014cb_vbd6086 #(
  .M(p1)
 ) vbd6086 (
  .rst(w0),
  .cnt(w2),
  .clk(w3),
  .ov(w4),
  .q(w5)
 );
endmodule

module vd014cb_vbd6086 #(
 parameter M = 0
) (
 input clk,
 input rst,
 input cnt,
 output [7:0] q,
 output ov
);
 //-- Numero de bits del contador
 localparam N = 8; 
 
 //-- En contadores de N bits:
 //-- M = 2 ** N
 
 //-- Internamente usamos un bit mas
 //-- (N+1) bits
 reg [N:0] qi = 0;
 
 always @(posedge clk)
   if (rst | ov)
     qi <= 0;
   else
     if (cnt)
       qi <= qi + 1;
       
 assign q = qi;
 
 //-- Comprobar overflow
 assign ov = (qi == M);
     
endmodule

module vebfed3 #(
 parameter vfb06ae = 1
) (
 input vac0eb2,
 output v2a8434
);
 localparam p2 = vfb06ae;
 wire w0;
 wire w1;
 assign v2a8434 = w0;
 assign w1 = vac0eb2;
 vebfed3_v6cac2f #(
  .HZ(p2)
 ) v6cac2f (
  .o(w0),
  .clk(w1)
 );
endmodule

module vebfed3_v6cac2f #(
 parameter HZ = 0
) (
 input clk,
 output o
);
 //localparam HZ;
 
 //-- Constante para dividir y obtener una frecuencia de 1Hz
 localparam M = 12000000/HZ;
 
 //-- Calcular el numero de bits para almacenar M
 localparam N = $clog2(M);
 
 //-- Cable de reset para el contador
 wire reset;
 
 //-- Registro del divisor
 reg [N-1:0] divcounter;
 
 
 //-- Contador con reset
 always @(posedge clk)
   if (reset)
     divcounter <= 0;
   else
     divcounter <= divcounter + 1;
 
 //-- Comparador que resetea el contador cuando se alcanza el tope
 assign reset = (divcounter == M-1);
 
 //-- La salida es la señal de overflow
 assign o = reset;
 
 
 
 
endmodule

module v35f267 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v35f267_vd54ca1 vd54ca1 (
  .a(w0),
  .c(w1)
 );
endmodule

module v35f267_vd54ca1 (
 input a,
 output c
);
 //-- Puerta NOT
 
 //-- module (input wire a, output wire c);
 
 
 assign c = ~a;
 
 
 //-- endmodule
 
endmodule

module v02e28e #(
 parameter v2acdf5 = "",
 parameter v816a8f = 8'd32
) (
 input v4479bb,
 input [7:0] v627d0b,
 output [7:0] v2a7461
);
 localparam p1 = v2acdf5;
 localparam p3 = v816a8f;
 wire w0;
 wire [0:7] w2;
 wire [0:7] w4;
 assign w0 = v4479bb;
 assign v2a7461 = w2;
 assign w4 = v627d0b;
 v02e28e_vdb04b1 #(
  .ROMFILE(p1),
  .size(p3)
 ) vdb04b1 (
  .clk(w0),
  .D(w2),
  .A(w4)
 );
endmodule

module v02e28e_vdb04b1 #(
 parameter ROMFILE = 0,
 parameter size = 0
) (
 input clk,
 input [7:0] A,
 output [7:0] D
);
 
 //-- ROM memory
 reg [7:0] rom [0:size-1];
 
 //-- Address bus (4 bits)
 wire [7:0] A;
 
 //-- Data bus (8 bits)
 reg [7:0] D;
 
 always @(negedge clk) begin
   D <= rom[A];
 end
 
 
 //-- Memory contents read
 //-- from the ROMFILE file
 initial begin
     if (ROMFILE) $readmemh(ROMFILE, rom);
 end
 
endmodule

module v21cfcc (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 v21cfcc_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

module v21cfcc_vb2eccd (
 output q
);
 //-- Bit constante a 0
 assign q = 1'b0;
 
 
endmodule

module vf1fcf8 #(
 parameter v79a04d = 8'h00,
 parameter v65ff05 = 8'hFF,
 parameter vee4e49 = 8'h00,
 parameter vc78345 = 8'h7F
) (
 input va34edf,
 input [7:0] v371b73,
 input v47c08a,
 output v85e0b7
);
 localparam p0 = v65ff05;
 localparam p1 = v79a04d;
 localparam p2 = vc78345;
 localparam p3 = vee4e49;
 wire [0:7] w4;
 wire w5;
 wire w6;
 wire w7;
 assign w4 = v371b73;
 assign w5 = v47c08a;
 assign w6 = va34edf;
 assign v85e0b7 = w7;
 vf1fcf8_v815aa1 #(
  .in_max_angle(p0),
  .in_min_angle(p1),
  .in_home_pos(p2),
  .in_trim(p3)
 ) v815aa1 (
  .bitpos(w4),
  .enable_mov(w5),
  .clk(w6),
  .servo(w7)
 );
endmodule

module vf1fcf8_v815aa1 #(
 parameter in_min_angle = 0,
 parameter in_max_angle = 0,
 parameter in_trim = 0,
 parameter in_home_pos = 0
) (
 input clk,
 input [7:0] bitpos,
 input enable_mov,
 output servo
);
 //-- ServoBit-180
 
 //--Originally created by Juan Gonzalez Gomez
 //--Modified by Julián Caro Linares
 
 //-- Control of simple servo motor
 //-- If enable_mov=0 the servo remains at "home_pos"
 //-- The trim parameter serves as a software offset for calibration
 
 //-- INPUTS:
 //--  clk: Signal of the system (12Mhz)
 //--  bitpos: Position input byte d'0-255 ->0-180º 
 
 //-- OUTPUTS:
 //-- servo : PWM signal to control the servo motor
 
 
 parameter min_angle =in_min_angle; //Min angle allowed
 parameter max_angle =in_max_angle; //Max angle allowed
 parameter home_pos=in_home_pos; //Home-Neutral position
 parameter trim=in_trim; //Position offset for calibration
 
 
 localparam BIT0 = min_angle;
 localparam BIT1 = max_angle;
 localparam BITH=home_pos;
 
 
 //-- 9 bits position of the servo. The additional byte is to avoid an overflow in the trim sum
 reg [8:0] pos;
 
 //-- Position check and assignment
 
 always @(posedge clk)
     begin
     
     //The position will be the sum of the input position +trim
     pos<=bitpos+$signed(trim);
 
     if (enable_mov ==0) //If the motor is not enabled
         begin
            pos<=BITH+$signed(trim);
         end   
     else if (pos>BIT1) //If the pos exceeds the maximum
         begin
            pos<=BIT1; 
         end
     else if (pos<BIT0) //Cuando excede, como la posicion es mucho menor siempre, se mete en el menor de If the pos exceeds the minimum
         begin
            pos<=BIT0;
         end
     else //If the pos is ok. Then the pos will be the sum of the input bitpos plus the trim
         begin
             pos<=bitpos+$signed(trim); 
         end
     
     end
 
     
   
   
 //--- ServoMotor PWM Generation 
 
 //-- M es el valor del divisor para
 //-- obtener tics de M / 12.0 micro-segundos
 localparam M = 94; 
 localparam N = $clog2(M);
 
 //-- Contador para generar los tics
 reg [N-1:0] divcounter = 0;
 
 //-- Flag para indicar que un tic
 //-- ha ocurrido
 reg tic = 0;
 
 //-- Generacion de los tics. Cada
 //-- M ciclos del reloj se genera 1
 always @(posedge clk)
  tic <= (divcounter == M - 2);
 
 //-- Contador modulo M
 always @(posedge clk)
  if (tic)
    divcounter <= 0;
  else
    divcounter <= divcounter + 1;
 
 //-- Contador de la posicion del 
 //-- servo
 reg [10:0] angle_counter = 0;
 
 //-- A la posicion destino hay que
 //-- sumarle un offset, correspondiente
 //-- a los 0.3ms de la posicion inicial
 wire [8:0] pose = {1'b0, pos} + 9'd46;
 
 //-- Con cada tic se incrementa el
 //-- contador de angulo del servo
 always @(posedge clk)
  if (tic)
    angle_counter <= angle_counter + 1;
 
 //-- Cuando el contador es menor que el 
 //-- valor objetivo, la señal de PWM
 //-- del servo se pone 1, y 0 en 
 //-- caso contrario
 
 reg servo;
 
 always @(posedge clk) begin
  servo <= (angle_counter < {2'b00, pose});
  end
 
 
endmodule

module v42ebf7 #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 input v9afc1f,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 wire w4;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 assign w4 = v9afc1f;
 v42ebf7_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3),
  .load(w4)
 );
endmodule

module v42ebf7_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 input load,
 output q
);
 reg q = INI;
 always @(posedge clk)
   if (load)
     q <= d;
endmodule

module v3e6c24 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 v3e6c24_v68c173 v68c173 (
  .v(w0)
 );
endmodule

module v3e6c24_v68c173 (
 output v
);
 // Bit 1
 
 assign v = 1'b1;
endmodule
